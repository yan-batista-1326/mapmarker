{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yan\\\\Desktop\\\\App\\\\mapmarker\\\\src\\\\components\\\\sidebar\\\\index.js\";\nimport React, { Component } from 'react';\nimport Konva from 'konva';\nimport './styles.css';\nlet stage = null;\nlet imageLayer = null;\nlet textLayer = null;\nlet markerLayer = null;\nexport default class Sidebar extends Component {\n  componentDidMount() {\n    Sidebar.initialize();\n  }\n\n  static initialize() {\n    //Create Stage\n    stage = new Konva.Stage({\n      container: 'contentCanvas',\n      width: 1024,\n      height: 720\n    }); //Create Layers\n\n    imageLayer = new Konva.Layer();\n    textLayer = new Konva.Layer();\n    markerLayer = new Konva.Layer();\n  }\n\n  static removeAll() {\n    stage.remove();\n  }\n\n  addPhoto() {\n    const reader = new FileReader();\n    const file = document.getElementById('addPhoto').files[0];\n\n    reader.onload = e => {\n      const result = e.target.result;\n      let mapObj = new Image();\n      mapObj.src = result;\n\n      mapObj.onload = () => {\n        let mapKonva = new Konva.Image({\n          image: mapObj,\n          width: 720,\n          height: 720,\n          offsetX: 720 / 2,\n          offsetY: 720 / 2,\n          x: stage.width() / 2,\n          y: stage.height() / 2\n        }); //Check if there is an image\n\n        if (imageLayer.find('Image').length > 0) {\n          Sidebar.removeAll();\n          Sidebar.initialize();\n        }\n\n        imageLayer.add(mapKonva);\n        imageLayer.batchDraw();\n        stage.add(imageLayer);\n      };\n    };\n\n    reader.readAsDataURL(file);\n  }\n\n  addMarker() {\n    if (imageLayer.find('Image').length > 0) {\n      //If there is an image\n      let markerObj = new Image();\n      markerObj.src = \"https://img.icons8.com/plasticine/100/000000/place-marker.png\";\n\n      markerObj.onload = () => {\n        let markerKonva = new Konva.Image({\n          image: markerObj,\n          width: 50,\n          height: 50,\n          draggable: true,\n          x: stage.width() / 2,\n          y: stage.height() / 2\n        });\n        markerLayer.add(markerKonva);\n        markerLayer.batchDraw();\n        markerKonva.on('dragend', () => {\n          //Check if the element is out of bounds and delete it if it is\n          let markerPos = markerKonva.getPosition();\n\n          if (markerPos.x > stage.width() - 50 || markerPos.x < 0 || markerPos.y > stage.height() - 50 || markerPos.y < 0) {\n            markerKonva.destroy();\n            markerLayer.batchDraw();\n          }\n        });\n        stage.add(markerLayer);\n      };\n    }\n  }\n\n  addText() {\n    if (imageLayer.find('Image').length > 0) {\n      //If there is an image\n      //Create Text Input\n      let textInput = document.createElement('input');\n      textInput.type = \"text\";\n      textInput.id = \"insertTextInput\";\n      document.getElementById('contentCanvas').appendChild(textInput);\n      textInput.focus(); //Send text event\n\n      textInput.addEventListener('keypress', e => {\n        let konvaText = null;\n\n        if (e.keyCode === 13) {\n          //Check Enter\n          let textValue = textInput.value; //Create and Add Konva Text to the layer\n\n          konvaText = new Konva.Text({\n            text: textValue.toUpperCase(),\n            fontSize: 20,\n            fontFamily: 'Roboto',\n            draggable: true,\n            x: stage.width() / 2,\n            y: stage.height() / 2,\n            fill: 'black',\n            name: 'textContent'\n          });\n          textLayer.add(konvaText);\n          konvaText.on('dragend', () => {\n            //Check if the element is out of bounds and delete it if it is\n            let textPos = konvaText.getPosition();\n\n            if (textPos.x > stage.width() - 50 || textPos.x < 0 || textPos.y > stage.height() - 50 || textPos.y < 0) {\n              konvaText.destroy();\n              textLayer.batchDraw();\n            }\n          });\n          stage.add(textLayer); //Remove Input and related listeners\n\n          document.removeEventListener('click', e);\n          textInput.remove();\n        }\n      }); //Check if there is a click outside the element, and remove it\n\n      document.addEventListener('click', e => {\n        if (e.target !== textInput) {\n          document.removeEventListener('click', e);\n          textInput.remove();\n        }\n      }); //Create the transformer\n\n      let konvaTransformer = new Konva.Transformer();\n      textLayer.add(konvaTransformer); //Check if user clicked on the text and select it\n\n      stage.on('click', e => {\n        if (!e.target.hasName('textContent')) konvaTransformer.nodes([]);else konvaTransformer.nodes([e.target]);\n        textLayer.batchDraw();\n      });\n    }\n  }\n\n  saveMap() {\n    if (imageLayer.find('Image').length > 0) {\n      //Check if there is an image to be saved\n      let link = document.createElement('a');\n      link.download = 'map.jpeg';\n      link.href = stage.toDataURL({\n        pixelRatio: 2\n      });\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"https://img.icons8.com/metro/26/000000/cursor.png\",\n      alt: \"cursor_icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"https://img.icons8.com/ios/50/000000/marker.png\",\n      alt: \"marker_icon\",\n      onClick: this.addMarker,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"https://img.icons8.com/material-sharp/24/000000/text.png\",\n      alt: \"text_icon\",\n      onClick: this.addText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"https://img.icons8.com/ios/50/000000/save.png\",\n      alt: \"save_icon\",\n      onClick: this.saveMap,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"addPhoto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"https://img.icons8.com/pastel-glyph/64/000000/plus.png\",\n      alt: \"add_icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 51\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.addPhoto,\n      type: \"file\",\n      name: \"photo\",\n      id: \"addPhoto\",\n      accept: \"image/png, image/jpeg, /image/jpg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Yan/Desktop/App/mapmarker/src/components/sidebar/index.js"],"names":["React","Component","Konva","stage","imageLayer","textLayer","markerLayer","Sidebar","componentDidMount","initialize","Stage","container","width","height","Layer","removeAll","remove","addPhoto","reader","FileReader","file","document","getElementById","files","onload","e","result","target","mapObj","Image","src","mapKonva","image","offsetX","offsetY","x","y","find","length","add","batchDraw","readAsDataURL","addMarker","markerObj","markerKonva","draggable","on","markerPos","getPosition","destroy","addText","textInput","createElement","type","id","appendChild","focus","addEventListener","konvaText","keyCode","textValue","value","Text","text","toUpperCase","fontSize","fontFamily","fill","name","textPos","removeEventListener","konvaTransformer","Transformer","hasName","nodes","saveMap","link","download","href","toDataURL","pixelRatio","body","click","removeChild","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Konva from 'konva';\r\n\r\nimport './styles.css';\r\n\r\nlet stage = null;\r\nlet imageLayer = null;\r\nlet textLayer = null;\r\nlet markerLayer = null;\r\n\r\nexport default class Sidebar extends Component {\r\n    componentDidMount() {\r\n        Sidebar.initialize();\r\n    }\r\n\r\n    static initialize() {\r\n        //Create Stage\r\n        stage = new Konva.Stage({\r\n            container: 'contentCanvas',\r\n            width: 1024,\r\n            height: 720\r\n        });\r\n\r\n        //Create Layers\r\n        imageLayer = new Konva.Layer();\r\n        textLayer = new Konva.Layer();\r\n        markerLayer = new Konva.Layer();\r\n    }\r\n\r\n    static removeAll() {\r\n        stage.remove();\r\n    }\r\n\r\n    addPhoto() {\r\n        const reader = new FileReader();\r\n        const file = document.getElementById('addPhoto').files[0];\r\n\r\n        reader.onload = (e) => {\r\n            const result = e.target.result;\r\n\r\n            let mapObj = new Image();\r\n            mapObj.src = result;\r\n\r\n            mapObj.onload = () => {\r\n                let mapKonva = new Konva.Image({\r\n                    image: mapObj,\r\n                    width: 720,\r\n                    height: 720,\r\n                    offsetX: 720/2,\r\n                    offsetY: 720/2,\r\n                    x: stage.width()/2,\r\n                    y: stage.height()/2\r\n                });\r\n\r\n                //Check if there is an image\r\n                if(imageLayer.find('Image').length > 0) {\r\n                    Sidebar.removeAll();\r\n                    Sidebar.initialize();\r\n                }\r\n\r\n                imageLayer.add(mapKonva);\r\n                imageLayer.batchDraw();\r\n                stage.add(imageLayer);\r\n            }\r\n        }\r\n\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    addMarker() {\r\n        if(imageLayer.find('Image').length > 0) { //If there is an image\r\n            let markerObj = new Image();\r\n            markerObj.src = \"https://img.icons8.com/plasticine/100/000000/place-marker.png\";\r\n\r\n            markerObj.onload = () => {\r\n                let markerKonva = new Konva.Image({\r\n                    image: markerObj,\r\n                    width: 50,\r\n                    height: 50,\r\n                    draggable: true,\r\n                    x: stage.width()/2,\r\n                    y: stage.height()/2\r\n                });\r\n                markerLayer.add(markerKonva);\r\n                markerLayer.batchDraw();\r\n\r\n                markerKonva.on('dragend', () => { //Check if the element is out of bounds and delete it if it is\r\n                    let markerPos = markerKonva.getPosition();\r\n                    if(markerPos.x > (stage.width() - 50) || markerPos.x < 0 || markerPos.y > (stage.height() - 50) || markerPos.y < 0) {\r\n                        markerKonva.destroy();\r\n                        markerLayer.batchDraw();\r\n                    }\r\n                });\r\n\r\n                stage.add(markerLayer);\r\n            }\r\n        }\r\n    }\r\n\r\n    addText() {\r\n        if(imageLayer.find('Image').length > 0) { //If there is an image\r\n            //Create Text Input\r\n            let textInput = document.createElement('input');\r\n            textInput.type = \"text\";\r\n            textInput.id = \"insertTextInput\";\r\n            document.getElementById('contentCanvas').appendChild(textInput);\r\n            textInput.focus();\r\n\r\n            //Send text event\r\n            textInput.addEventListener('keypress', (e) => {\r\n                let konvaText = null;\r\n                if(e.keyCode === 13) { //Check Enter\r\n                    let textValue = textInput.value;\r\n                    //Create and Add Konva Text to the layer\r\n                    konvaText = new Konva.Text({\r\n                        text: textValue.toUpperCase(),\r\n                        fontSize: 20,\r\n                        fontFamily: 'Roboto',\r\n                        draggable: true,\r\n                        x: stage.width()/2,\r\n                        y: stage.height()/2,\r\n                        fill: 'black',\r\n                        name: 'textContent'\r\n                    });\r\n                    textLayer.add(konvaText);\r\n\r\n                    konvaText.on('dragend', () => { //Check if the element is out of bounds and delete it if it is\r\n                        let textPos = konvaText.getPosition();\r\n                        if(textPos.x > (stage.width() - 50) || textPos.x < 0 || textPos.y > (stage.height() - 50) || textPos.y < 0) {\r\n                            konvaText.destroy();\r\n                            textLayer.batchDraw();\r\n                        }\r\n                    });\r\n\r\n                    stage.add(textLayer);\r\n\r\n                    //Remove Input and related listeners\r\n                    document.removeEventListener('click', (e));\r\n                    textInput.remove();\r\n                }\r\n            });\r\n\r\n            //Check if there is a click outside the element, and remove it\r\n            document.addEventListener('click', (e) => {\r\n                if(e.target !== textInput) {\r\n                    document.removeEventListener('click', (e));\r\n                    textInput.remove();\r\n                }\r\n            });\r\n\r\n            //Create the transformer\r\n            let konvaTransformer = new Konva.Transformer();\r\n            textLayer.add(konvaTransformer);\r\n\r\n            //Check if user clicked on the text and select it\r\n            stage.on('click', (e) => {\r\n                if(!e.target.hasName('textContent'))\r\n                    konvaTransformer.nodes([]);\r\n                else\r\n                    konvaTransformer.nodes([e.target]);\r\n\r\n                textLayer.batchDraw(); \r\n            });\r\n        }\r\n    }\r\n\r\n    saveMap() {\r\n        if(imageLayer.find('Image').length > 0) { //Check if there is an image to be saved\r\n            let link = document.createElement('a');\r\n            link.download = 'map.jpeg';\r\n            link.href = stage.toDataURL({pixelRatio: 2});\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"sidebar\">\r\n                <ul>\r\n                    <li><img src=\"https://img.icons8.com/metro/26/000000/cursor.png\" alt=\"cursor_icon\"/></li>\r\n                    <li><img src=\"https://img.icons8.com/ios/50/000000/marker.png\" alt=\"marker_icon\" onClick={this.addMarker}/></li>\r\n                    <li><img src=\"https://img.icons8.com/material-sharp/24/000000/text.png\" alt=\"text_icon\" onClick={this.addText}/></li>\r\n                    <li><img src=\"https://img.icons8.com/ios/50/000000/save.png\" alt=\"save_icon\" onClick={this.saveMap}/></li>\r\n                    <li>\r\n                        <label htmlFor=\"addPhoto\"><img src=\"https://img.icons8.com/pastel-glyph/64/000000/plus.png\" alt=\"add_icon\"/></label>\r\n                        <input onChange={this.addPhoto} type=\"file\" name=\"photo\" id=\"addPhoto\" accept=\"image/png, image/jpeg, /image/jpg\"></input>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}